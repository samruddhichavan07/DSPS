#include <iostream>
#include <stack>
#include <string>
using namespace std;

// Function to return precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') {
        return 1;  // Lowest precedence
    }
    if (op == '*' || op == '/') {
        return 2;  // Higher precedence
    }
    return 0;
}

// Function to check if the character is an operator
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Function to convert infix expression to postfix expression
string infixToPostfix(string infix) {
    stack<char> s;  // Stack to store operators and parentheses
    string postfix = "";  // To store the postfix expression

    for (int i = 0; i < infix.length(); i++) {
        char c = infix[i];

        // If the character is an operand, add it to postfix
        if (isalnum(c)) {
            postfix += c;
        }
        // If the character is '(', push it to the stack
        else if (c == '(') {
            s.push(c);
        }
        // If the character is ')', pop and add to postfix until '(' is found
        else if (c == ')') {
            while (!s.empty() && s.top() != '(') {
                postfix += s.top();
                s.pop();
            }
            s.pop();  // Remove '(' from stack
        }
        // If the character is an operator
        else if (isOperator(c)) {
            while (!s.empty() && precedence(s.top()) >= precedence(c)) {
                postfix += s.top();
                s.pop();
            }
            s.push(c);  // Push the current operator onto the stack
        }
    }

    // Pop all remaining operators from the stack and add to postfix
    while (!s.empty()) {
        postfix += s.top();
        s.pop();
    }

    return postfix;  // Return the postfix expression
}

int main() {
    string infixExpression;
    cout << "Enter a valid infix expression: ";
    cin >> infixExpression;

    string postfixExpression = infixToPostfix(infixExpression);
    cout << "Postfix Expression: " << postfixExpression << endl;

    return 0;
}
